<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[部署ssh密钥的批量分发]]></title>
    <url>%2F2019%2F08%2F22%2Fssh-deploy%2F</url>
    <content type="text"><![CDATA[sshd的安全设定123456789101112131415161718192021[root@xxx ~]# cd /etc/ssh/[root@xxx ssh]# ll总用量 604-rw-r--r--. 1 root root 581843 4月 11 2018 moduli-rw-r--r--. 1 root root 2276 4月 11 2018 ssh_config-rw-------. 1 root root 3907 4月 11 2018 sshd_config-rw-r-----. 1 root ssh_keys 227 7月 22 23:03 ssh_host_ecdsa_key-rw-r--r--. 1 root root 162 7月 22 23:03 ssh_host_ecdsa_key.pub-rw-r-----. 1 root ssh_keys 387 7月 22 23:03 ssh_host_ed25519_key-rw-r--r--. 1 root root 82 7月 22 23:03 ssh_host_ed25519_key.pub-rw-r-----. 1 root ssh_keys 1679 7月 22 23:03 ssh_host_rsa_key-rw-r--r--. 1 root root 382 7月 22 23:03 ssh_host_rsa_key.pub#sshd配置文件[root@xxx ssh]# vi sshd_config##是否允许root用户（通过sshd服务）登录PermitRootLogin yes|no ##是否允许用户用密码（通过sshd服务）登录PasswordAuthentication yes|no ##修改配置完成后重启服务systemctl restart sshd.service sudo配置文件1234567891011121314151617181920212223242526272829303132[root@xxx sudoers.d]# vi /etc/susubgid sudo.conf sudoers.d/ subuid sudoers#主配置文件 sudo-ldap.conf #新建一个sudoers配置文件[root@xxx sudoers.d]# vi /etc/sudoers.d/test_sudoers #test-sudoers组中的用户，拥有所有sudo权限，能无密码切换到root账户%test-sudoers ALL=(ALL:ALL) NOPASSWD:ALL############################################################创建拥有sudo权限的账户的范例####创建名称为test-sudoers的组[root@xxx ~]# groupadd test-sudoers#创建用户，附属组为test-sudoers[root@xxx ~]# useradd -G test-sudoers liubaoliang[root@xxx ~]# passwd liubaoliang #切换到root账户sudo -i[root@rsync ~]# ssh liubaoliang@192.168.1.24Last login: Thu Aug 22 18:21:03 2019 from 192.168.1.30[liubaoliang@xxx ~]$ pwd/home/liubaoliang[liubaoliang@xxx ~]$ sudo -i[root@xxx ~]# pwd/root#切换到root账户，家目录不变 sudo -s[root@rsync ~]# ssh liubaoliang@192.168.1.24Last login: Thu Aug 22 20:36:52 2019 from 192.168.1.30[liubaoliang@xxx ~]$ pwd/home/liubaoliang[liubaoliang@xxx ~]$ sudo -s[root@xxx liubaoliang]# pwd/home/liubaoliang 部署ssh密钥的批量分发1.下载epel源，或者直接更换 阿里源 163源 12345678#安装扩展源[root@xxx ~]# yum -y install epel#替换为阿里源mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backupwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.reposed -i -e '/mirrors.cloud.aliyuncs.com/d' -e '/mirrors.aliyuncs.com/d' /etc/yum.repos.d/CentOS-Base.reporoot@xxx ~]# yum clean all [root@xxx ~]# yum makecache 2.安装sshpass免交互工具 1[root@xxx ~]# yum -y install sshpass.x86_64 3.创建密匙对 1234567891011121314151617181920212223[root@xxx ~]# ssh-keygen -t rsa -f ~/.ssh/id_rsa -P ""Generating public/private rsa key pair.Your identification has been saved in /root/.ssh/id_rsa.Your public key has been saved in /root/.ssh/id_rsa.pub.The key fingerprint is:SHA256:fYSA7OtTFR4g/x5HK1TP5zbQ9u1e3EkngOVzh1bIpKc root@xxxThe key's randomart image is:+---[RSA 2048]----+| ...o. oo...|| oo .o* ++o || . ..+oB.Boo|| . +oo Oo+o|| .S.= E .o*|| . .. = .==|| . . . .=|| o ..|| . .|+----[SHA256]-----+命令说明：ssh-keygen:生成密钥对命令-t：指定密钥对的密码加密类型（rsa，dsa两种）-f：指定密钥对文件的生成路径包含文件名-P（大写）：指定密钥对的密码 4.免交互方式分发公钥 12345678[root@xxx ~]# sshpass -p "ssh登录密码" ssh-copy-id -i ~/.ssh/id_rsa.pub -o StrictHostKeyChecking=no root@192.168.1.24命令说明：sshpass：专为ssh连接服务的免交户工具-p ：指定登录的密码ssh-copy-id：自动分发公钥的工具 （分发公匙到 用户@主机 家目录下.ssh/authorized_keys文件中）-i：指定公钥路径-o StrictHostKeyChecking=no :不进行对方主机信息的写入（第一次ssh连接会在know_hosts文件里记录） 5.测试ssh密钥免密登陆 123[root@rsync ~]# ssh root@192.168.1.24Last login: Thu Aug 22 18:00:50 2019 from 192.168.1.30[root@nginx02 ~]# 6.编写ssh密钥对免交互批量分发脚本（重要） 1234567891011121314151617181920212223242526272829303132333435363738394041424344#!/bin/bash# author:Mr.liu# 2019-8-22# description:SSH密钥批量分发#主机数组 根据实际情况修改host=("192.168.1.24" "192.168.1.25" "192.168.1.25")user=rootpassword='@bxxxxxx'function YumBuild()&#123;echo "正在安装epel源yum仓库，请稍后..."cd /etc/yum.repos.d/ &amp;&amp;\[ -d bak ] || mkdir bak[ `find ./*.* -type f | wc -l` -gt 0 ] &amp;&amp; find ./*.* -type f | xargs -i mv &#123;&#125; bak/wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo &amp;&gt;/dev/nullsed -i -e '/mirrors.cloud.aliyuncs.com/d' -e '/mirrors.aliyuncs.com/d' /etc/yum.repos.d/CentOS-Base.repoyum -y clean all &amp;&gt;/dev/nullyum makecache &amp;&gt;/dev/null&#125;echo "正在进行网络连接测试,请稍后..."ping www.baidu.com -c2 &gt;/dev/null ||(echo "无法连通外网，本脚本运行环境必须和外网相连！" &amp;&amp; exit)yum -y install sshpass &amp;&gt;/dev/nullif [ $? -gt 0 ];then YumBuild yum -y install sshpass &amp;&gt;/dev/null || (echo "sshpass build error！" &amp;&amp; exit)fi[ -d ~/.ssh ] || mkdir ~/.ssh;chmod 700 ~/.sshecho "正在创建密钥对...."rm -rf ~/.ssh/id_rsa ~/.ssh/id_rsa.pubssh-keygen -t rsa -f ~/.ssh/id_rsa -P "" &amp;&gt;/dev/nullfor ip in $&#123;host[*]&#125;do ping $ip -c2 &amp;&gt;/dev/null if [ $? -gt 0 ];then echo "$ip无法ping通请检查网络" continue fi sshpass -p "$password" ssh-copy-id -o StrictHostKeyChecking=no $user@$ip &amp;&gt;/dev/null echo "$ip 密钥分发成功"done 脚本核心命令 1234567891011121314151617181920#!/bin/bash#ssh密钥对免交户批量分发脚本#定义用户数组 适用于单个主机多用户#user=("liubaoliang" "caomaolbl")#password="123456"#host="192.168.1.24"#for i in $&#123;user[*]&#125; ; do#sshpass -p "$password" ssh-copy-id -o StrictHostKeyChecking=no $i@$host# echo "$i@$host 密钥分发成功"#done#定义主机数组 适用于单用户多主机host=("192.168.1.24" "192.168.1.25" "192.168.1.25")user=rootpassword="@xxxxxx"for i in $&#123;host[*]&#125; ; doecho "$user@$i 密钥分发详情......"sshpass -p "$password" ssh-copy-id -o StrictHostKeyChecking=no $user@$idone 7.测试脚本 1234567891011121314151617[root@rsync ~]# ./ssh_nopasswd_deploy_v1.0.sh 正在进行网络连接测试,请稍后...正在创建密钥对....192.168.1.24 密钥分发成功192.168.1.25无法ping通请检查网络192.168.1.25无法ping通请检查网络#查看被分发的主机的情况，authorized_keys中已经被添加公匙，分发成功[root@nginx02 .ssh]# ll总用量 0-rw------- 1 root root 0 8月 22 21:10 authorized_keys[root@nginx02 .ssh]# ll总用量 4-rw------- 1 root root 392 8月 22 21:12 authorized_keys[root@nginx02 .ssh]# vi authorized_keys ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCj4WhZYGrqnbaS/ysML1MkE+I9PeHdBCH3uMu4f6PV9WYw4SbttVgb6ZszsKHPS0w9MWkbWyQ8iujtPdfZp0dKaBmd9NYInn7CHlvyziolhm4A28HGQ6DviLBssA3+BzJ2nMhH95hgO7D6RnedoK9rs12LnsMfAq6PkbY6svMfegBml221JpkBISS1TbYMtP7wM8kNqDg+SKYKAb2Ff7ccuPmCQ64HDeonlg/V27wILWal0wIpNs4QOtRZYWGfGlMpkoevv1ljzIx1rhSIM2CSvuzI3nUhHN1tIyB4YuY7ckJLIf0zB/xJ/8K4LWO8dHWyMWXBvsdXUu+94yU9Ephb root@rsync]]></content>
      <categories>
        <category>Linux</category>
        <category>ssh</category>
      </categories>
      <tags>
        <tag>ssh密钥的批量分发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux shell数组]]></title>
    <url>%2F2019%2F08%2F21%2Fshuzu%2F</url>
    <content type="text"><![CDATA[A=”a b c def” # 定义字符串A=(a b c def) # 定义字符数组 123456789| 命令 | 解释 | 结果 || -------- | --------------------------------- | --------- || $&#123;A[@]&#125; | 返回数组全部元素 | a b c def || $&#123;A[*]&#125; | 同上 | a b c def || $&#123;A[0]&#125; | 返回数组第一个元素 | a || $&#123;#A[@]&#125; | 返回数组元素总个数 | 4 || $&#123;#A[*]&#125; | 同上 | 4 || $&#123;#A[3]&#125; | 返回第四个元素的长度，即def的长度 | 3 || A[3]=xzy | 则是将第四个组数重新定义为 xyz | | 示例 1234567891011121314151617181920[root@nginx02 ~]# A=(a b c def)[root@nginx02 ~]# echo $&#123;A[@]&#125;a b c def[root@nginx02 ~]# echo $&#123;A[*]&#125;a b c def[root@nginx02 ~]# echo $&#123;A[0]&#125;a[root@nginx02 ~]# echo $&#123;A[1]&#125;b[root@nginx02 ~]# echo $&#123;A[2]&#125;c[root@nginx02 ~]# echo $&#123;A[3]&#125;def[root@nginx02 ~]# echo $&#123;#A[@]&#125;4[root@nginx02 ~]# echo $&#123;#A[*]&#125;4[root@nginx02 ~]# echo $&#123;#A[0]&#125;1[root@nginx02 ~]# 1[Linux—shell中$(( ))、$( )、``与$&#123; &#125;的区别](https://blog.csdn.net/number_0_0/article/details/73291182)]]></content>
      <categories>
        <category>Linux</category>
        <category>shell编程</category>
      </categories>
      <tags>
        <tag>shell数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Rysnc数据同步工具]]></title>
    <url>%2F2019%2F08%2F21%2Frsync%2F</url>
    <content type="text"><![CDATA[Rsync的工作方式 单个主机本地之间的数据传输（此时类似于cp命令的功能） 借助rcp，ssh等通道来传输数据（此时类似于scp命令的功能） 以守护进程（socket）的方式传输数据（这个是rsync自身的重要功能） 1.本地数据传输模式（local-only mode）Rsync本地传输模式的语法为：rsync [OPTION...] SRC...[DEST]语法说明：1）Rsync为同步的命令；2）[OPTION]为同步时的参数选项3）SRC为源，即待拷的分区，文件或目录等；4）[DEST]为目的分区，文件或目录等；直接本地同步：相当于cprsync /etc/hosts /tmp/ 1[root@rsync ~]# rsync -avzP /etc /mnt/ rsync 命令常用参数选项说明：-v，–verbose 详细模式输出，传输时的进度等信息-z，–compress 传输时进行压缩以提高传输效率，–compress-level=NUM可按级别压缩。-a，–archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rtopgD1（字母1）-P, –progress 显示同步的过程及传输时的进度等信息 -r,–recursive 对子目录以递归模式，即目录下的所有目录都同样传输，注意是小写r -t，–times 保持文件时间信息 -o，–owner 保持文件属主信息 -p，–perms 保持文件权限 -g，–group 保持文件属组信息 -P，–progress 显示同步的过程及传输时的进度等信息 -D，–devices 保持设备文件信息 -l，–links 保留软链接 -e，–rsh=COMMAND 使用的信道协议（remote shell），指定替代rsh的shell程序。例如：ssh –exclude=PATTERN 指定排除不需要传输的文件模式（和tar参数一样） –bwlimit=RATE limit socket I/O bandwidth –delete 让源目录SRC和目标目录数据DST一致 保持同步目录及文件属性这里的-avzP 相当于-vzrtopgDIP（还多了DI功能），生产环境常用的参数选项为-avzP或-vzrtopgP如果是放入脚本中，也可以把-v何-P去掉。这里的–progress可以用-P代替。在脚本中只需要 -az某DBA做数据同步，带宽占满，导致用户无法访问网站。 1234#没有做带宽限制[root@rsync ~]# rsync -avzP dbfile 192.168.1.100:/backup#添加带宽限制[root@rsync ~]# rsync -avzP --bwlimit=100 dbfile 192.168.1.100:/backup 特别提示：请注意以下两条命令的差别： 12341)rsync -avz /opt/ /tmp/2)rsync -avz /opt /tmp/1)中/opt/的意思是，仅把/opt/目录里面的内容同步过来，opt目录本身并不同步；而后者2）中/opt表示把opt本身及其内部内容全都同步到/tmp下，仅一个/（斜线之差），意义大不相同，请同学们注意使用的差别。2）在后边要讲的通过远程shell进行数据传输的内容也会有类似的问题，请牢记。 特别提示： 1在传输数据时，rsync命令也需要有对同步的目录拥有权限如此才可以实现正常传输数据。 2.借助ssh通道在不同主机之间传输数据** 前提：做好ssh密匙对登录** 12345678910#创建密匙对[root@rsync ~]# ssh-keygen #公匙添加到本机 当前账户.ssh/authorized_keys中[root@rsync ~]# ssh-copy-id 192.168.1.30#拷贝公匙到远程主机 .ssh/authorized_keys中[root@rsync ~]# ssh-copy-id root@192.168.1.24[root@nginx02 ~]# cd .ssh/[root@nginx02 .ssh]# ll总用量 4-rw------- 1 root root 392 8月 21 11:40 authorized_keys 示例1:推送：将当前主机内容推送到远程主机 1234[root@rsync ~]# rsync -avzP -e 'ssh -p 22' /etc root@192.168.1.24:/tmp/[root@rsync ~]# rsync -avzP /etc root@192.168.1.24:/tmp/#命令说明-e 'ssh -p 22' 表示以ssh的方式通过22端口推送，如果不写默认22端口 示例2:将远程主机内容拉取到当前主机 12345678910[root@rsync ~]# rsync -avzP -e 'ssh -p 22' root@192.168.1.24:/etc /tmp/关键语法说明：1）-avz相当于-vzrtopgDI，表示同步时文件和目录属性不变。2）-P显示同步的过程，可以用--progress替换。3）-e ‘ssh -p 22’表示通过ssh通道传输数据，可省略4）root@rsync:/opt 远程主机系统用户，地址，路径5）/tmp本地的路径[root@rsync ~]# rsync -avzP root@192.168.1.24:/etc /tmp/ 3.以守护进程（socket）的方式传输数据（重点） 主机名 IP地址 用途 代号 rsync 192.168.1.30 rsync服务端 A-Server nginix02 192.168.1.24 rsync客户端 B-Server 要求在A-Server上以rsync守护进程的方式部署rsync服务，使得所有rsync节点客户端主机，可以把本地数据通过rsync的方式备份到数据备份服务器A-Server上。本例的客户端仅以B-Server为例。 开始部署rsync服务–Rsync服务器端A-Server操作过程： 配置rsyncd.conf 1234567891011121314151617181920212223242526272829303132333435363738394041424344#man rsyncd.conf的配置说明[root@rsync ~]# man rsyncd.conf#rsyncd.conf配置文件[root@rsync ~]# cat /etc/rsyncd.conf # 用户uid = rsync# 组gid = rsync#新版本必须开启的选项fake super = yesuse chroot = no# 客户端连接数max connections = 200# 进程号文件位置pid file = /var/run/rsyncd.pid# 进程锁lock file = /var/run/rsync.lock# exclude = lost+found/transfer logging = yes# 日志文件位置log file = /var/log/rsyncd.log# 超时时间timeout = 900ignore nonreadable = yesdont compress = *.gz *.tgz *.zip *.z *.Z *.rpm *.deb *.bz2#模块名称[backup]# 使用目录path = /backup/# 有错误时忽略ignore errors# 可读可写（true或false）read only = false# 阻止远程列表（不让通过远程方式看服务端有啥）list=false# 允许IPhosts allow = 192.168.1.0/24# 禁止IPhosts deny = 0.0.0.0/32# 虚拟用户auth users = rsync_backup# 存放用户和密码的文件secrets file = /etc/rsync.password 创建共享目录及添加rsync程序用户 123456#创建用户rsync -M不创建家目录 -s 指定shell[root@rsync ~]# useradd -M -s /sbin/nologin rsync#创建备份目录[root@rsync ~]# mkdir /backup#更改备份目录属主[root@rsync ~]# chown -R rsync.rsync /backup 创建rsync虚拟账户名和密码，将账户密码文件的权限设置为600（必须否则失败） 1234[root@rsync ~]# echo "rsync_backup:123456" &gt;/etc/rsync.password[root@rsync ~]# cat /etc/rsync.passwordrsync_backup:123456[root@rsync ~]# chmod 600 /etc/rsync.password 启动rsync服务，并开机启动 1234###[root@rsync ~]# rsync --daemon[root@rsync ~]# systemctl enable rsyncd[root@rsync ~]# systemctl start rsyncd[root@rsync ~]# systemctl status rsyncd.service 开始部署rsync服务–Rsync客户端B-Server 只需要创建密码文件，将密码文件的权限设置为600（必须否则失败） 12[root@rsync ~]# echo "123456" &gt; /etc/rsync.password[root@rsync ~]# chmod 600 /etc/rsync.password 以 客户端B-Server 为参考 对服务端A-Server进行推拉操作 推送测试1：将客户端指定目录内容推送到服务器端rsync指定目录下。 123456789rsync -avz /backup/ rsync_backup@192.168.1.30::backup --password-file=/etc/rsync.password命令说明：-avz：保持稳健各项属性不变，-v显示同步信息 -P显示具体同步过程/backup/：要推送的内容所在目录rsync_backup:服务器端rsync服务的同步的用户名（非Linux用户）192.168.1.30:rsync服务器IP地址backup：rsync服务器配置文件里的模块名--password-file=/etc/rsync.password：免密码的操作，指定密码文件位置，如果不写，则会要求用户交互式输入密码。（如果想挂定时任务，必须得非交互式） 拉取测试1：将rsync服务器端指定目录全部内容同步到客户端 1234rsync -avzP rsync_backup@192.168.1.30::backup/abc.tar.gz /backup/ --password-file=/etc/rsync.password命令说明：和推送相比，只是两个目录换了个位置。 拉取测试2: 将rsync服务器端指定目录下的全部内容排除某目录或文件后，同步到客户端 123456789101112131415161718#方法一：rsync -avz --exclude=a --exclude=chen/3 --exclude=chen/4 rsync_backup@192.168.1.30::backup /backup/ --password-file=/etc/rsync.password 命令说明：--exlude=文件名 ：排除的文件#方法二：通过列表文件实现排除创建排除列表文件[root@rsync backup]# cat /root/exclude.txt 135besync -avz --exclude-from=/root/exclude.txt rsync_backup@192.168.1.30::backup /backup/ --password-file=/etc/rsync.password命令说明：--exclude-from=文件的绝对路径 ：引用一个排除列表，列表里只需要输入排除的文件名即可 rsync同步拉取测试：让rsync客户端指定目录内容始终和rsync服务器共享目录内容保持一致 1234567891011#始终保持一致的意思是说，当Rsync服务器共享目录增加文件，那么客户端指定目录也增加，服务器端共享目录删除文件，那么客户端指定目录也删除文件rsync -avz --delete rsync_backup@192.168.11.30::backup /backup/ --password-file=/etc/rsync.password 命令说明：--delete ：表示同步增，删,改（文件内容出现变化，也会同步的）#排除某文件后，再和服务器进行同步rsync -avz --delete --exclude=c rsync_backup@192.168.1.30::backup /backup/ --password-file=/etc/rsync.password 命令说明：--exclude=c：同步时不考虑文件名为c的文件 rsync同步推送测试：让Rsync服务器端共享目录始终和rsync客户端指定目录内容一致。 12345678#始终保持一致的意思是说，当Rsync客户端指定目录增加文件，那么服务器端共享目录也增加，客户端指定目录删除文件，那么服务器端共享目录也删除文件rsync -avz --delete /backup/ rsync_backup@192.168.1.30::backup --password-file=/etc/rsync.password 命令说明：--delete ：表示同步增，删,改（文件内容出现变化，也会同步的）与同步拉取相比：只是客户端目录放在了服务器端的前边。##--exclude=文件名。排除某文件后，再和服务器进行同步 Rsync企业应用之风险提示 12345678910111213141516特别说明：执行--delete参数从rsync服务器端往rsync客户端拉取数据时，一定要小心，最好不用，它比从rsync客户端带--delete参数往rsync服务端推送危险的多。客户端带--delete参数往服务端推送仅删除服务端模块下的数据，而前者有能力删除rsync客户端本地的所有数据包括跟下的所有目录。rsync推送企业工作场景：1）备份 --delete 风险本地有啥，远端就有啥，本地没有的远端有也要删除。服务器端的目录数据可能丢失。rsync拉取企业工作场景：1）代码发布，下载。--delete风险远端有啥，本地（客户端）就有啥，远端没有的本地有也要删除。本地的目录数据可能丢失。 rsync无差异同步的生产场景应用一般是有需要两台服务器之间，必须要求数据一致，且时时性又不是很高的情况下，如两台负载均衡下面web服务器之间的同步，或者高可用双机配置之间的同步等，rsync无差异同步非常的危险，而且，有很多的替代方案，因此，生产场景没有特殊的需求，应避免使用。切记，有很多朋友都已经有了血的教训 Rsync 优缺点 12345678rsync优点：1，增量备份，支持socket（daemon），集中备份（支持推拉，都是以客户端为参照物）。2，远程SHELL通道模式还可以加密（SSH）传输，socket（daemon）需要加密传输，可以利用vpn服务或ipsec服务rsync缺点：1，大量小文件时候同步的时候，比对时间较长，有的时候，同步过程中，rsync进程可能会停止，僵死了。2，同步大文件，10G这样的大文件有时也会出问题，中断。未完整同步前，是隐藏文件，可以通过续传（--partial）等参数实现传输3，一次性远程拷贝可以用scp，大量小文件要打成一个包再拷贝。（重要） 排错必备思想 1231.部署流程步骤熟练2.rsync原理理解3.学会看日志，rsync命令行输出，日志文件/var/log/rsyncd.log Rsync守护进程服务传输数据排错思路： 1234567891011121314151617Rsync服务端排错思路1.查看rsync服务配置文件路径是否正确，正确的默认路径为：/etc/rsyncd.conf2.查看配置文件里host allow,host deny，允许的IP网段是否是允许客户端访问的ip网段3.查看配置文件中path参数里的路径是否存在，权限是否正确（正常应为配置文件中的UID参数对应的属主和组）4.查看rsync服务是否启动。查看命令为：ps -ef|grep rsync。端口是否存在netstat -antup |grep 8735.查看iptables防火墙和selinux是否开启允许rsync服务通过，也可以考虑关闭。6.查看服务端rsync配置的密码文件是否为600的权限，密码文件格式是否正确，正确格式为：用户名：密码，文件路径和7.配置文件里的secrect files参数对应。8.如果是推送数据，要查看下，配置rsyncd.conf文件中用户是否对模块下目录有可读写的权限。Rsync客户端拍错思路1.查看客户端rsync配置的密码文件是否600的权限，密码文件格式是否正确，注意：仅需要有密码，并且和服务器端的密码保持一致。2.用telnet连接rsync服务器ip地址873端口，查看服务是否启动（可测试服务端防火墙是否阻挡）telnet 192.168.1.30 8733.客户端执行命令时：rsync -avzP rsync_backup@192.168.1.30::backup /backup/ --password-file=/etc/rsync.password此命令的细节要记清楚，尤其192.168.1.30::backup 处的双冒号及其后的backup为模块名称 附录1: rsyncd.conf配置文件常用参数说明：(老版本不全） rsyncd.conf参数 参数说明 uid=rsync #rsync使用的用户。 gid=rsync #rsync使用的用户组（用户所在的组） use chroot=no #如果为true，daemon会在客户端传输文件前“chroot to the path”。这是一种安全配置，因为我们大多数都在内网，所以不配也没关系 max connections=200 #设置最大连接数，默认0，意思无限制，负值为关闭这个模块 timeout=400 #默认为0，表示no timeout，建议300-600（5-10分钟） pid file #rsync daemon启动后将其进程pid写入此文件。如果这个文件存在，rsync不会覆盖该文件，而是会终止 lock file #指定lock文件用来支持“max connections”参数，使得总连接数不会超过限制 log file #不设或者设置错误，rsync会使用rsyslog输出相关日志信息 ignore errors #忽略I/O错误 read only=false #指定客户端是否可以上传文件，默认对所有模块为true list=false #是否允许客户端可以查看可用模块列表，默认为可以 hosts allow #指定可以联系的客户端主机名或和ip地址或地址段，默认情况没有此参数，即都可以连接 hosts deny #指定不可以联系的客户端主机名或ip地址或地址段，默认情况没有此参数，即都可以连接 auth users #指定以空格或逗号分隔的用户可以使用哪些模块，用户不需要在本地系统中存在。默认为所有用户无密码访问 secrets file #指定用户名和密码存放的文件，格式；用户名；密码，密码不超过8位 [backup] #这里就是模块名称，需用中括号扩起来，起名称没有特殊要求，但最好是有意义的名称，便于以后维护 path #这个模块中，daemon使用的文件系统或目录，目录的权限要注意和配置文件中的权限一致，否则会遇到读写的问题 1234特别说明：1）模块中的参数项可以拿到全局配置中使用2）以上配置文件中的参数，为生产中经常使用的参数，初学者掌握这些足够了。3）以上配置文件中没有提到的参数请参考man rsyncd.conf查看 Rsync项目实战企业案例某公司里有一台Web服务器，里面的数据很重要，但是如果硬盘坏了，数据就会丢失，现在领导要求你把数据在其他机器上做一个周期性定时备份。要求如下：每天晚上00点整在Web服务器A上打包备份网站程序目录并通过rsync命令推送到服务器B上备份保存（备份思路可以是先在本地按日期打包，本地只保留7天内的备份文件，然后再利用rsync推送到备份服务器上）。具体要求如下：1）web服务器nginx02和备份服务器rsync的备份目录都为/backup2）web服务器站点目录假定为（/var/www/html）3）web服务器本地仅保留7天内的备份。4）备份服务器上检查备份结果是否正常，并将每天的备份结果发给管理员信箱。5）备份服务器上备份仅保留180天内备份。 1.配置好rsync服务端见上文 开始部署rsync服务--Rsync服务器端A-Server操作过程： 2.客户端见上文 开始部署rsync服务--Rsync客户端B-Server 123456789101112131415161718192021222324252627282930313233#创建目录[root@nginx02 ~]# mkdir /backup#创建脚本[root@nginx02 ~]# vi backup_etc.sh[root@nginx02 ~]# cat backup_etc.sh#备份/etc目录到/backupetc$DATE,并创建日志文件/var/log/"backup_etc$DATE".log#删除/backup目录下7天前的文件，并记录到日志#备份backupetc$DATE到rsync服务端backup/host_24目录下，并记录到日志#!/bin/bashDATE=`date +%F-%H`tar -zcvf /backup/etc$DATE /etc/ &gt;/var/log/"backup_etc$DATE".log 2&gt;&amp;1find /backup -mtime +7 -name "*.*" -exec rm -rf &#123;&#125; \;&gt;&gt;/var/log/"backup_etc$DATE".log 2&gt;&amp;1rsync -avz /backup/ rsync_backup@192.168.1.30::backup/host_24 --password-file=/etc/rsync.password &gt;&gt;/var/log/"backup_etc$DATE".log 2&gt;&amp;1 #脚本添加执行权限[root@nginx02 ~]# chmod 755 backup_etc.sh#添加定时任务[root@nginx02 ~]# vi /etc/crontab SHELL=/bin/bashPATH=/sbin:/bin:/usr/sbin:/usr/binMAILTO=root# For details see man 4 crontabs# Example of job definition:# .---------------- minute (0 - 59)# | .------------- hour (0 - 23)# | | .---------- day of month (1 - 31)# | | | .------- month (1 - 12) OR jan,feb,mar,apr ...# | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat# | | | | |# * * * * * user-name command to be executed 0 0 * * * root /root/backup_etc.sh 3.rsync服务端 定时任务删除180天前备份 123456789101112131415161718192021222324#创建脚本[root@nginx02 ~]# vi del_d180_backup.sh[root@nginx02 ~]# cat del_d180_backup.sh#!/bin/bashDATE=`date +%F-%H`find /backup -mtime +180 -name "*.*" -exec rm -rf &#123;&#125; \;&gt;&gt;/var/log/"del_d180_backup$DATE".log 2&gt;&amp;1#添加定时任务[root@nginx02 ~]# vi /etc/crontab SHELL=/bin/bashPATH=/sbin:/bin:/usr/sbin:/usr/binMAILTO=root# For details see man 4 crontabs# Example of job definition:# .---------------- minute (0 - 59)# | .------------- hour (0 - 23)# | | .---------- day of month (1 - 31)# | | | .------- month (1 - 12) OR jan,feb,mar,apr ...# | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat# | | | | |# * * * * * user-name command to be executed 0 0 * * * root /root/del_d180_backup.sh 文章参考链接rsync服务常见问题汇总man在线中文手册1man在线中文手册2]]></content>
      <categories>
        <category>Linux</category>
        <category>rsync</category>
      </categories>
      <tags>
        <tag>rsync</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux man手册中文显示]]></title>
    <url>%2F2019%2F08%2F21%2Fcman%2F</url>
    <content type="text"><![CDATA[1.查看man-pages-zh-CN.noarch是否安装123456789101112131415161718[root@nginx02 ~]# yum list | grep zhman-pages-zh-CN.noarch 1.5.2-4.el7 @anacondaautocorr-zh.noarch 1:5.3.6.1-19.el7 base calligra-l10n-zh_CN.noarch 2.9.10-1.el7 epel calligra-l10n-zh_TW.noarch 2.9.10-1.el7 epel #如果未安装[root@nginx02 ~]# yum install man-pages-zh-CN.noarch -y#查看安装文件位置[root@nginx02 ~]# rpm -ql man-pages-zh-CN.noarch/usr/share/doc/man-pages-zh-CN-1.5.2/usr/share/doc/man-pages-zh-CN-1.5.2/COPYING/usr/share/doc/man-pages-zh-CN-1.5.2/NEWS/usr/share/doc/man-pages-zh-CN-1.5.2/README/usr/share/man/zh_CN/man1/[.1.gz/usr/share/man/zh_CN/man1/a2p.1.gz/usr/share/man/zh_CN/man1/ab.1.gz/usr/share/man/zh_CN/man1/ac.1.gz 2.新建cman命令作为中文查询手册12345678910111213141516171819202122[root@nginx02 ~]# cd ~[root@nginx02 ~]# echo "alias cman='man -M /usr/share/man/zh_CN' " &gt;&gt;.bash_profile[root@nginx02 ~]# source .bash_profile [root@nginx02 ~]# cman lsLS(1) General Commands Manual LS(1)NAME ls, dir, vdir - 列目录内容提要 ls [选项] [文件名...] POSIX 标准选项: [-CFRacdilqrtu1]GNU 选项 (短格式): [-1abcdfgiklmnopqrstuxABCDFGLNQRSUX] [-w cols] [-T cols] [-I pattern] [--full-time] [--for‐ mat=&#123;long,verbose,commas,across,vertical,single-column&#125;] [--sort=&#123;none,time,size,extension&#125;] [--time=&#123;atime,access,use,ctime,status&#125;] [--color[=&#123;none,auto,always&#125;]] [--help] [--version] [--]描述（ DESCRIPTION ）]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>man中文</tag>
        <tag>cman</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx配置location总结]]></title>
    <url>%2F2019%2F08%2F19%2Fnginx-location%2F</url>
    <content type="text"><![CDATA[location匹配顺序 “=”前缀指令匹配，如果匹配成功，则停止其他匹配 普通字符串指令匹配，顺序是从长到短，匹配成功的location如果使用^~，则停止其他匹配（正则匹配） 正则表达式指令匹配，按照配置文件里的顺序，成功就停止其他匹配 如果第三步中有匹配成功，则使用该结果，否则使用第二步结果 注意点 匹配的顺序是先匹配普通字符串，然后再匹配正则表达式。另外普通字符串匹配顺序是根据配置中字符长度从长到短，也就是说使用普通字符串配置的location顺序是无关紧要的，反正最后nginx会根据配置的长短来进行匹配，但是需要注意的是正则表达式按照配置文件里的顺序测试。找到第一个比配的正则表达式将停止搜索。 一般情况下，匹配成功了普通字符串location后还会进行正则表达式location匹配。有两种方法改变这种行为，其一就是使用“=”前缀，这时执行的是严格匹配，并且匹配成功后立即停止其他匹配，同时处理这个请求；另外一种就是使用“^~”前缀，如果把这个前缀用于一个常规字符串那么告诉nginx 如果路径匹配那么不测试正则表达式。 匹配模式及顺序 location = /uri =开头表示精确匹配，只有完全匹配上才能生效。 location ^~ /uri ^~ 开头对URL路径进行前缀匹配，并且在正则之前。 location ~ pattern ~开头表示区分大小写的正则匹配。 location ~* pattern ~*开头表示不区分大小写的正则匹配。 location /uri 不带任何修饰符，也表示前缀匹配，但是在正则匹配之后。 location / 通用匹配，任何未匹配到其它location的请求都会匹配到，相当于switch中的default。 实验案例实验1 测试 ^~ 和 ~ ，nginx配置如下。浏览器输入http://localhost/data/test，返回501。如将#1注释，#2打开，浏览器输入http://localhost/data/test，返回503。注：#1和#2不能同时打开，如同时打开，启动nginx会报nginx:[emerg] duplicate location “/data”…，因为这两个都是普通字符串。 1234567891011location ^~ /data &#123; #1 return 501; &#125; #location /data &#123; #2# return 502;# &#125;location ~ /data &#123; return 503; &#125; 实验2 测试普通字符串的长短（普通字符串的匹配与顺序无关，与长短有关）。浏览器输入http://localhost/data/test/a.html，返回501。浏览器输入http://localhost/data/a.html，返回502。 1234567location /data/test &#123; return 501; &#125; location /data &#123; return 502; &#125; 实验3 测试正则表达式的顺序（正则匹配与顺序相关）。浏览器输入http://localhost/data/test/a.html，返回502；将#2和#3调换顺序，浏览器输入http://localhost/data/test/a.html，返回503 1234567891011location /data/test &#123; #1 return 501; &#125; location ~* /data &#123; #2 return 502; &#125; location ~* /data/test &#123; #3 return 503; &#125;]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx_location</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cisco交换机安全]]></title>
    <url>%2F2019%2F08%2F15%2Fswitch-security%2F</url>
    <content type="text"><![CDATA[简介二层网络攻击和欺骗行在网络实际环境中，其来源可概括为两个途径:人为实施，病毒或蠕虫。人为实施通常是指使用一些黑客的工具对网络进行扫描和嗅探， 获取管理帐户和相关密码，在网络上中安插木马，从而进行进一步窃取机密文件。攻击和欺骗过程往往比较隐蔽和安静，但对于信息安全要求高的企业危害是极大的。木马、蠕虫病毒的攻击不仅仅是攻击和欺骗，同时还会带来网络流量加大、设备CPU利用率过高、二层生成树环路、网络瘫痪等现象。网络第二层的攻击是网络安全攻击者最容易实施， 也是最不容易被发现的安全威胁，它的目标是让网络失效或者通过获取诸如密码这样的敏感信息而危及网络用户的安全。因为任何一个合法用户都能获取一个以太网端口的访问权限，这些用户都有可能成为黑客，同时由于设计OSI模型的时候，允许不同通信层在相互不了解情况下也能进行工作，所以第二层的安全就变得至关重要。如果这一层受到黑客的攻击，网络安全将受到严重威胁，而且其他层之间的通信还会继续进行，同时任何用户都不会感觉到攻击已经危及应用层的信息安全。所以，仅仅基于认证(如IEEE 802.1x)和访问控制列表(ACL，Access Control Lists)的安全措施是无法防止本文中提到的来自网络第二层的安全攻击。一个经过认证的用户仍然可以有恶意，并可以很容易地执行本文提到的所有攻击。 目前这类攻击和欺骗工具已经非常成熟和易用。这些攻击都来自于网络的第二层，主要包括以下几种: MAC地址泛洪攻击 DHCP服务器欺骗攻击 ARP欺骗 IP/MAC地址欺骗 Cisco Catalyst 智能交换系列的创新特性针对这类攻击提供了全面的解决方案，将发生在网络第二层的攻击阻止在通往内部网的第一入口处，主要基于下面的几个关键的技术。 Port Security DHCP Snooping Dynamic ARP Inspection (DAI) IP Source Guard 下面主要针对目前这些非常典型的二层攻击和欺骗说明如何在思科交换机上组合运用和部署上述技术，从而防止在交换环境中的“中间人”攻击、 MAC/CAM攻击、 DHCP攻击、地址欺骗等，更具意义的是通过上面技术的部署可以简化地址管理， 直接跟踪用户IP和对应的交换机端口，防止IP地址冲突。同时对于大多数具有地址扫描、欺骗等特征的病毒可以有效的报警和隔离。 1. MAC地址泛滥攻击的防范MAC泛滥攻击的原理和危害交换机主动学习客户端的MAC地址，并建立和维护端口和MAC地址的对应表以此建立交换路径，这个表就是通常我们所说的CAM表。 CAM表的大小是固定的，不同的交换机的CAM表大小不同。MAC/CAM攻击是指利用工具产生欺骗MAC， 快速填满CAM表，交换机CAM表被填满。黑客发送大量带有随机源MAC地址的数据包，这些新MAC地址被交换机CAM学习，很快塞满MAC地址表，这时新目的MAC地址的数据包就会广播到交换机所有端口，交换机就像共享HUB一样工作，黑客可以用sniffer工具监听所有端口的流量。此类攻击不仅造成安全性的破坏，同时大量的广播包降低了交换机的性能。当交换机的CAM表被填满后，交换机以广播方式处理通过交换机的报文，这时攻击者可以利用各种嗅探攻击获取网络信息。更为严重的是，这种攻击也会导致所有邻接的交换机CAM表被填满，流量以泛洪方式发送到所有交换机的所有含有此VLAN的接口，从而造成交换机负载过大、网络缓慢和丢包甚至瘫痪。 防范方法限制单个端口所连接MAC地址的数目可以有效防止类似macof工具和SQL蠕虫病毒发起的攻击， macof可被网络用户用来产生随机源MAC地址和随机目的MAC地址的数据包，可以在不到10秒的时间内填满交换机的CAM表。 Cisco Catalyst交换机的端口安全(Port Security)和动态端口安全功能可被用来阻止MAC泛滥攻击。例如交换机连接单台工作站的端口，可以限制所学MAC地址数为1;连接IP电话和工作站的端口可限制所学MAC地址数为3:IP电话、工作站和IP电话内的交换机。通过端口安全功能，网络管理员也可以静态设置每个端口所允许连接的合法MAC地址，实现设备级的安全授权。动态端口安全则设置端口允许合法MAC地址的数目，并以一定时间内所学习到的地址作为合法MAC地址。 配置Port Security可以控制： 端口上最大可以通过的MAC地址数量 端口上学习或通过哪些MAC地址 对于超过规定数量的MAC处理进行违背处理 端口上学习或通过哪些MAC地址，可以通过静态手工定义，也可以在交换机自动学习。交换机动态学习端口MAC，直到指定的MAC地址数量，交换机关机后重新学习。目前较新的技术是Sticky Port Security，交换机将学到的mac地址写到端口配置中，交换机重启后配置仍然存在。对于超过规定数量的MAC处理进行处理一般有三种方式(针对交换机型号会有所不同): Shutdown:端口关闭 Protect:丢弃非法流量，不报警 Restrict:丢弃非法流量，报警 Port Security配置 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#端口模式access模式SW1(config-if)#switchport mode access#使能port-securitySW1(config-if)#switchport port-security#端口允许最大mac地址数量设置为2SW1(config-if)#switchport port-security maximum 2#用sticky自动粘贴绑定mac地址 ###如果一个mac地址被粘贴在这个端口 机器移动到其他端口也会触发惩罚行为SW1(config-if)#switchport port-security mac-address sticky SW1(config-if)#switchport port-security violation ? protect Security violation protect mode #丢弃包，不报警 restrict Security violation restrict mode #丢弃包，报警 shutdown Security violation shutdown mode #关闭端口#超过mac地址允许数量触发的惩罚措施为 关闭端口SW1(config-if)#switchport port-security violation shutdown#设置errdisable接口自动恢复SW1(config)#errdisable recovery cause psecure-violation #设置errdisable端口恢复时间间隔30sSW1(config)#errdisable recovery interval 30SW1#show port-security Secure Port MaxSecureAddr CurrentAddr SecurityViolation Security Action (Count) (Count) (Count)--------------------------------------------------------------------------- Gi0/3 2 2 0 Shutdown---------------------------------------------------------------------------Total Addresses in System (excluding one mac per port) : 1Max Addresses limit in System (excluding one mac per port) : 4096 SW1#show port-security address Secure Mac Address Table-----------------------------------------------------------------------------Vlan Mac Address Type Ports Remaining Age (mins) ---- ----------- ---- ----- ------------- 10 0050.7966.6803 SecureSticky Gi0/3 - 10 0050.7966.6804 SecureSticky Gi0/3 ------------------------------------------------------------------------------Total Addresses in System (excluding one mac per port) : 1Max Addresses limit in System (excluding one mac per port) : 4096SW1#show port-security interface g0/3Port Security : EnabledPort Status : Secure-shutdownViolation Mode : ShutdownAging Time : 0 minsAging Type : AbsoluteSecureStatic Address Aging : DisabledMaximum MAC Addresses : 2Total MAC Addresses : 2Configured MAC Addresses : 0Sticky MAC Addresses : 2Last Source Address:Vlan : 0050.7966.6805:10Security Violation Count : 1#MAC地址表SW1#show mac address-table Mac Address Table-------------------------------------------Vlan Mac Address Type Ports---- ----------- -------- ----- 10 0050.7966.6803 STATIC Gi0/3 10 0050.7966.6804 STATIC Gi0/3 10 0050.7966.6805 STATIC Gi0/1 10 0050.7966.6806 STATIC Gi0/2 Total Mac Addresses for this criterion: 4 2.DHCP欺骗攻击的防范采用DHCP管理的常见问题采用DHCP server可以自动为用户设置网络IP地址、掩码、网关、 DNS、 WINS等网络参数，简化了用户网络设置，提高了管理效率。但在DHCP管理使用上也存在着一些另网管人员比较问题，常见的有: DHCP server 的冒充 DHCP server的DOS攻击 有些用户随便指定地址，造成网络地址冲突 由于DHCP 的运作机制，通常服务器和客户端没有认证机制，如果网络上存在多台DHCP服务器将会给网络照成混乱。由于不小心配置了DHCP服务器引起的网络混乱也非常常见。黑客利用类似Goobler的工具可以发出大量带有不同源MAC地址的DHCP请求，直到DHCP服务器对应网段的所有地址被占用，此类攻击既可以造成DOS的破坏，也可和DHCP服务器欺诈结合将流量重指到意图进行流量截取的恶意节点。DHCP服务器欺诈可能是故意的，也可能是无意启动DHCP服务器功能，恶意用户发放错误的IP地址、 DNS服务器信息或默认网关信息，以此来实现流量的截取。一个“不可靠”的DHCP服务器通常被用来与攻击者协作，对网络实施“中间人”MITM(Man-In-The-Middle)攻击。中间人攻击是一种攻击者利用正常的协议处理行为来更改两个终端之间的正常通信数据流而形成的一种攻击技术。首先一个黑客会广播许多含有欺骗性MAC地址的DHCP请求(动态主机配置请求)， 从而耗尽合法DHCP服务器上的地址空间，一旦其空间地址被耗尽，这个“不可靠”的DHCP服务器就开始向“用户”的DHCP请求进行应答了， 这些应答信息中将包括DNS服务器和一个默认网关的信息， 这些信息就被用来实施一个MITM中间人攻击。黑客也可以利用冒充的DHCP服务器，为用户分配一个经过修改的DNS Server，在用户毫无察觉的情况下被引导在预先配置好的假金融网站或电子商务网站，骗取用户帐户和密码，这种攻击是非常恶劣的。 DHCP Snooping技术概述DHCP Snooping技术是DHCP安全特性，通过建立和维护DHCP Snooping绑定表过滤不可信任的DHCP信息，这些信息是指来自不信任区域的DHCP信息。 通过截取一个虚拟局域网内的DHCP信息，交换机可以在用户和DHCP服务器之间担任就像小型安全防火墙这样的角色， “DHCP监听”功能基于动态地址分配建立了一个DHCP绑定表，并将该表存贮在交换机里。在没有DHCP的环境中，如数据中心，绑定条目可能被静态定义，每个DHCP绑定条目包含客户端地址(一个静态地址或者一个从DHCP服务器上获取的地址)、客户端MAC地址、端口、 VLAN ID、租借时间、绑定类型(静态的或者动态的)。如下表所示: 12345678910SW1#show ip dhcp snooping binding MacAddress IpAddress Lease(sec) Type VLAN Interface------------------ --------------- ---------- ------------- ---- --------------------Total number of bindings: 0SW1#show ip dhcp snooping binding MacAddress IpAddress Lease(sec) Type VLAN Interface------------------ --------------- ---------- ------------- ---- --------------------00:50:79:66:68:05 192.168.10.21 86391 dhcp-snooping 10 GigabitEthernet0/1Total number of bindings: 1 这张表不仅解决了DHCP用户的IP和端口跟踪定位问题， 为用户管理提供方便，而且还供给动态ARP检测(DAI)和IP SourceGuard使用。 基本防范了防止这种类型的攻击， Catalyst DHCP侦听(DHCPSnooping)功能可有效阻止此类攻击，当打开此功能，所有用户端口除非特别设置，被认为不可信任端口，不应该作出任何DHCP响应，因此欺诈DHCP响应包被交换机阻断，合法的DHCP服务器端口或上连端口应被设置为信任端口。Catalyst DHCP侦听(DHCP Snooping)对于下边介绍的其他阻止ARP欺骗和IP/MAC地址的欺骗是必需的。首先定义交换机上的信任端口和不信任端口， 对于不信任端口的DHCP报文进行截获和嗅探， DROP掉来自这些端口的非正常DHCP响应应报文。基本配置如下： Core基本配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475interface GigabitEthernet0/3 switchport trunk encapsulation dot1q switchport mode trunk media-type rj45 negotiation auto#排除ip dhcp excluded-address 192.168.10.200 192.168.10.254ip dhcp excluded-address 192.168.10.1 192.168.10.20#建立名为 pool10 的地址池ip dhcp pool pool10 #网络地址段 network 192.168.10.0 255.255.255.0 #网关地址 default-router 192.168.10.1 #dns地址 dns-server 192.168.10.1 #租期 lease 8#配置绑定MAC的地址池#绑定的IP地址，一个地址池只能绑定一个IP,如果多个IP,需要多个dhcp池。#client-identifier 01xx.xxxx.xxxx.xx MAC地址变成指定的格式ip dhcp pool pool10_liu host 192.168.10.15 255.255.255.0 client-identifier 0100.5079.6668.06 default-router 192.168.10.1 dns-server 192.168.10.1!interface Vlan10 ip address 192.168.10.1 255.255.255.0#关闭dhcp服务Core(config)#no service dhcp #清除dhcp绑定表Core#clear ip dhcp binding ? * Clear all automatic bindings A.B.C.D Clear a specific binding vrf DHCP vrf bindings#显示dhcp bindingCore#show ip dhcp binding Bindings from all pools not associated with VRF:IP address Client-ID/ Lease expiration Type State Interface Hardware address/ User name192.168.10.15 0100.5079.6668.06 Infinite Manual Active Unknown192.168.10.25 0100.5079.6668.05 Jan 09 2018 12:39 AM Automatic Active Vlan10#显示dhcp池信息Core#show ip dhcp pool Pool pool10 : Utilization mark (high/low) : 100 / 0 Subnet size (first/next) : 0 / 0 Total addresses : 254 Leased addresses : 1 Excluded addresses : 76 Pending event : none 1 subnet is currently in the pool : Current index IP address range Leased/Excluded/Total 192.168.10.26 192.168.10.1 - 192.168.10.254 1 / 76 / 254 Pool pool10_liu : Utilization mark (high/low) : 100 / 0 Subnet size (first/next) : 0 / 0 Total addresses : 1 Leased addresses : 1 Excluded addresses : 1 Pending event : none 0 subnet is currently in the pool : Current index IP address range Leased/Excluded/Total 192.168.10.15 192.168.10.15 - 192.168.10.15 1 / 1 / 1 Core#show ip dhcp server statistics#显示冲突地址Core#show ip dhcp conflict#显示租期Core#show dhcp lease SW1配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112#在vlan10上开启dhcp snoopingip dhcp snooping vlan 10#DHCP客户端获取IP经过的所有启dhcp snooping的交换机 关闭DHCP请求中添加option 82报文的特性#设置交换机是否为非信任端口收到的DHCP报文插入Option 82，默认即为开启状态no ip dhcp snooping information option //非信任端口收到的DHCP请求报文的源MAC和CHADDR字段是否相同，以防止DHCP耗竭攻击，该功能默认即为开启。 如果是cisco设备作为dhcp server 需要 no掉这项 ，或者 用其他方式---#打开dhcp snoopingip dhcp snoopingerrdisable recovery cause psecure-violation#自动恢复dhcp-rate-limit触发的惩罚行为errdisable recovery cause dhcp-rate-limiterrdisable recovery interval 30interface GigabitEthernet0/0 switchport trunk encapsulation dot1q switchport mode trunk media-type rj45 negotiation auto #设置为trust端口，默认为untrust ip dhcp snooping trust!interface GigabitEthernet0/1 switchport access vlan 10 switchport mode access switchport port-security maximum 2 switchport port-security mac-address sticky switchport port-security mac-address sticky 0050.7966.6805 switchport port-security media-type rj45 negotiation auto # 限制非信任端口的DHCP报文速率为每秒15个包（默认即为每秒15个包）如果不配该语句，则show ip dhcp snooping的结果将不列出没有该语句的端口，可选速率范围为1-2048 ip dhcp snooping limit rate 15SW1(config)#ip dhcp snooping database flash:dhcp_snooping.dbSW1(config)#ip dhcp snooping database tftp://192.168.2.5/SW1/dhcp_snooping.db#SW1(config)#ip dhcp snooping database write-delay 300 #SW1(config)#ip dhcp snooping database timeout 300SW1(config)##从数据库文件中读取DHCP监听表SW1#renew ip dhcp snooping database flash:dhcp_snooping.db#特权模式命令：手工添加一条DHCP监听绑定条目；expiry为时间值，即为监听绑定中的lease（租期）SW1#ip dhcp snooping binding 000f.1fc5.1008 vlan 10 192.168.10.131 interface G0/2 expiry 692000 #显示当前DHCP监听的各选项和各端口的配置情况SW1#show ip dhcp snooping Switch DHCP snooping is enabledSwitch DHCP gleaning is disabledDHCP snooping is configured on following VLANs:10DHCP snooping is operational on following VLANs:10DHCP snooping is configured on the following L3 Interfaces:Insertion of option 82 is disabled circuit-id default format: vlan-mod-port remote-id: 5000.0002.0000 (MAC)Option 82 on untrusted port is not allowedVerification of hwaddr field is enabledVerification of giaddr field is enabledDHCP snooping trust/rate is configured on the following Interfaces:Interface Trusted Allow option Rate limit (pps)----------------------- ------- ------------ ---------------- GigabitEthernet0/0 yes yes unlimited Custom circuit-ids:GigabitEthernet0/1 no no 15 Custom circuit-ids:GigabitEthernet0/2 no no 15 Interface Trusted Allow option Rate limit (pps)----------------------- ------- ------------ ---------------- Custom circuit-ids:GigabitEthernet0/3 no no 15 Custom circuit-ids:#显示当前的DHCP监听绑定表SW1#show ip dhcp snooping binding MacAddress IpAddress Lease(sec) Type VLAN Interface------------------ --------------- ---------- ------------- ---- --------------------50:00:00:04:00:00 192.168.10.26 687952 dhcp-snooping 10 GigabitEthernet1/000:50:79:66:68:06 192.168.10.15 70142 dhcp-snooping 10 GigabitEthernet0/200:50:79:66:68:05 192.168.10.25 674957 dhcp-snooping 10 GigabitEthernet0/1Total number of bindings: 3#显示DHCP监听绑定数据库的相关信息SW1#show ip dh snooping database Agent URL : flash:dhcp_snooping.dbWrite delay Timer : 300 secondsAbort Timer : 300 secondsAgent Running : NoDelay Timer Expiry : Not RunningAbort Timer Expiry : Not RunningLast Succeded Time : 04:20:55 UTC Mon Jan 1 2018Last Failed Time : NoneLast Failed Reason : No failure recorded.Total Attempts : 3 Startup Failures : 0Successful Transfers : 3 Failed Transfers : 0Successful Reads : 0 Failed Reads : 0Successful Writes : 3 Failed Writes : 0Media Failures : 0#显示DHCP监听的工作统计SW1#show ip dh snooping statistics Packets Forwarded = 23 Packets Dropped = 23 Packets Dropped From untrusted ports = 23#清除DHCP监听绑定表；注意：本命令无法对单一条目进行清楚，只能清除所有条目SW1#clear ip dhcp snooping binding #清空DHCP监听绑定数据库的计数器SW1#clear ip dhcp snooping database statistics #清空DHCP监听的工作统计计数器SW1#clear ip dhcp snooping statistics 思科设备做dhcp server时的两种配置方法 123456789101112A方案：接入和汇聚交换机上：no ip dhcp snooping information optionB方案：汇聚交换机上：ip dhcp snooping information option allow-untrustedDHCP服务器上：int vlan 10ip dhcp relay information trusted或者全局下：ip dhcp relay information trust-all 测试证明：使用B方式适合于使用DAI+ipsourceGuard（ipsourceGuard是检测ip和mac的情况，只检测ip地址不会有什么问题，A和B都可以），A方式就支持的不好，客户端获取IP地址很慢，影响使用体验，要想快必须在端口安全时敲上switchport port-security mac-address sticky，使端口下接入的pc的mac地址写入到交换机的静态表里面，提高第二次pc获取ip地址的速度。 高级防范对于类似Gobbler的DHCP 服务的DOS攻击可以利用前面的Port Security限制源MAC地址数目加以阻止，对于有些用户随便指定地址，造成网络地址冲突也可以利用后面提到的DAI和IP Source Guard技术。有些复杂的DHCP攻击工具可以产生单一源MAC地址、变化DHCP Payload信息的DHCP请求，当打开DHCP侦听功能，交换机对非信任端口的DHCP请求进行源MAC地址和DHCP Payload信息的比较，如不匹配就阻断此请求。 3. ARP欺骗攻击原理和防范（必须和DHCP Snooping联用）ARP欺骗攻击原理ARP是用来实现MAC地址和IP地址的绑定，这样两个工作站才可以通讯，通讯发起方的工作站以MAC广播方式发送ARP请求，拥有此IP地址的工作站给予ARP应答，送回自己的IP和MAC地址。ARP协议同时支持一种无请求ARP功能， 局域网段上的所有工作站收到主动ARP广播，会将发送者的MAC地址和其宣布的IP地址保存，覆盖以前cache的同一IP地址和对应的MAC地址，主动式ARP合法的用途是用来以备份的工作站替换失败的工作站。由于ARP无任何身份真实校验机制，黑客程序发送误导的主动式ARP使网络流量重指经过恶意攻击者的计算机， 变成某个局域网段IP会话的中间人，达到窃取甚至篡改正常传输的功效。黑客程序发送的主动式ARP采用发送方私有MAC地址而非广播地址，通讯接收方根本不会知道自己的IP地址被取代。为了保持ARP欺骗的持续有效，黑客程序每隔30秒重发此私有主动式ARP。黑客工具如ettercap、dsniff和arpspoof都能实现ARP哄骗功能。像ettercap可提供一个用户界面，在对本地网段所有工作站的扫描后， ettercap显示所有工作站源地址和目的地址，选择ARP哄骗命令后，除数据包的截取外，内置的智能sniffer功能还可以针对不同IP会话获取password信息。这里举个例子，假定同一个局域网内，有3 台主机通过交换机相连:A 主 机 :IP 地 址 为 192.168.0.1 ， MAC 地 址 为01:01:01:01:01:01B 主 机 :IP 地 址 为 192.168.0.2 ， MAC 地 址 为02:02:02:02:02:02C 主 机 :IP 地 址 为 192.168.0.3 ， MAC 地 址 为03:03:03:03:03:03B 主机对A 和C 进行欺骗的前奏就是发送假的ARP 应答包，在收到B主机发来的ARP应答后， A主机应知道:到 192.168.0.3 的 数 据 包 应 该 发 到 MAC 地 址 为020202020202 的主机;C 主机也知道:到192.168.0.1 的数据包应该发到MAC 地址为020202020202 的主机。这样， A 和C都认为对方的MAC 地址是020202020202，实际上这就是B 主机所需得到的结果。当然，因为ARP 缓存表项是动态更新的，其中动态生成的映射有个生命期，一般是两分钟，如果再没有新的信息更新， ARP 映射项会自动去除。所以， B还有一个“任务”，那就是一直连续不断地向A 和C 发送这种虚假的ARP 响应包，让其ARP缓存中一直保持被毒害了的映射表项。现在，如果A 和C 要进行通信，实际上彼此发送的数据包都会先到达B 主机，这时，如果B 不做进一步处理， A 和C 之间的通信就无法正常建立，B 也就达不到“嗅探”通信内容的目的，因此，B 要对“错误”收到的数据包进行一番修改， 然后转发到正确的目的地，而修改的内容，无非是将目的MAC 和源MAC 地址进行替换。如此一来，在A 和C 看来，彼此发送的数据包都是直接到达对方的，但在B 来看，自己担当的就是“第三者”的角色。 这种嗅探方法，也被称作中间人MIMT(Man-In-The-Middle)的方法。 防范方法这些攻击都可以通过动态ARP检查(DAI， Dynamic ARP Inspection)来防止，它可以帮助保证接入交换机只传递“合法的”的ARP请求和应答信息。 DHCP Snooping监听绑定表包括IP地址与MAC地址的绑定信息并将其与特定的交换机端口相关联，动态ARP检测(DAI-Dynamic ARP Inspection)可以用来检查所有非信任端口的ARP请求和应答(主动式ARP和非主动式ARP)， 确保应答来自真正的ARP所有者。 Catalyst交换机通过检查端口纪录的DHCP绑定信息和ARP应答的IP地址决定是否真正的ARP所有者，不合法的ARP包将被删除。DAI配置针对VLAN，对于同一VLAN内的接口可以开启DAI也可以关闭，如果ARP包从一个可信任的接口接受到，就不需要做任何检查，如果ARP包在一个不可信任的接口上接受到，该包就只能在绑定信息被证明合法的情况下才会被转发出去。这样， DHCPSnooping对于DAI来说也成为必不可少的， DAI是动态使用的，相连的客户端主机不需要进行任何设置上的改变。对于没有使用DHCP的服务器个别机器可以采用静态添加DHCP绑定表或ARPaccess-list实现 另外，通过DAI可以控制某个端口的ARP请求报文频率。一旦ARP请求频率的频率超过预先设定的阈值，立即关闭该端口。该功能可以阻止网络扫描工具的使用，同时对有大量ARP报文特征的病毒或攻击也可以起到阻断作用。 配置示例 123456789101112131415161718192021222324252627282930313233343536373839404142434445ip arp inspection vlan 10ip arp inspection log-buffer entries 1024ip arp inspection log-buffer logs 1024 interval 10!!!ip dhcp snooping vlan 10no ip dhcp snooping information optionip dhcp snooping database flash:dhcp_snooping.dbip dhcp snooping!errdisable recovery cause psecure-violationerrdisable recovery cause dhcp-rate-limiterrdisable recovery interval 30!interface GigabitEthernet0/0 switchport trunk encapsulation dot1q switchport mode trunk ip arp inspection trust media-type rj45 negotiation auto ip dhcp snooping trust!interface GigabitEthernet0/1 switchport access vlan 10 switchport mode access switchport port-security maximum 2 switchport port-security mac-address sticky switchport port-security mac-address sticky 0050.7966.6805 switchport port-security ip arp inspection limit rate 20 #默认为15 media-type rj45 negotiation auto ip dhcp snooping limit rate 15 #对于没有使用DHCP设备可以采用下面办法:arp access-list static-arppermit ip host 192.168.10.254 mac host 0009.6b88.d387ip arp inspection filter static-arp vlan 10 #或者手工绑定dhcp snooping表SW1#ip dhcp snooping binding 000f.1fc5.1008 vlan 10 192.168.10.131 interface G0/2 expiry 692000 #配置DAI后的效果#在配置DAI技术的接口上，用户端不能采用指定地址地址将接入网络。#由于DAI检查 DHCP snooping绑定表中的IP和MAC对应关系，无法实施中间人攻击，攻击工具失效。下表为实施中间人攻击是交换机的警告 4. IP/MAC欺骗的防范常见的欺骗攻击的种类和目的除了ARP欺骗外，黑客经常使用的另一手法是IP地址欺骗。常见的欺骗种类有MAC欺骗、 IP欺骗、 IP/MAC欺骗，其目的一般为伪造身份或者获取针对IP/MAC的特权。此方法也被广泛用作DOS攻击，目前较多的攻击是:Ping OfDeath、 Syn flood、 ICMP Unreacheable Storm。如黑客冒用A地址对B地址发出大量的ping包，所有ping应答都会返回到B地址，通过这种方式来实施拒绝服务(DoS)攻击，这样可以掩盖攻击系统的真实身份。富有侵略性的TCP SYN洪泛攻击来源于一个欺骗性的IP地址，它是利用TCP三次握手会话对服务器进行颠覆的又一种攻击方式。一个IP地址欺骗攻击者可以通过手动修改地址或者运行一个实施地址欺骗的程序来假冒一个合法地址。另外病毒和木马的攻击也会使用欺骗的源IP地址。互联网上的蠕虫病毒也往往利用欺骗技术来掩盖它们真实的源头主机。 IP/MAC欺骗的防范（必须和DHCP Snooping联用）Catalyst IP源地址保护(IP Source Guard)功能打开后，可以根据DHCP侦听记录的IP绑定表动态产生PVACL，强制来自此端口流量的源地址符合DHCP绑定表的记录，这样攻击者就无法通过假定一个合法用户的IP地址来实施攻击了， 这个功能将只允许对拥有合法源地址的数据保进行转发， 合法源地址是与IP地址绑定表保持一致的， 它也是来源于DHCP Snooping绑定表。 因此， DHCPSnooping功能对于这个功能的动态实现也是必不可少的，对于那些没有用到DHCP的网络环境来说，该绑定表也可以静态配置。IP Source Guard不但可以配置成对IP地址的过滤也可以配置成对MAC地址的过滤，这样，就只有IP地址和MAC地址都于DHCP Snooping绑定表匹配的通信包才能够被允许传输。此时，必 须 将 IP 源 地 址 保 护 IP Source Guard 与 端 口 安 全 PortSecurity功能共同使用，并且需要DHCP服务器支持Option 82时，才可以抵御IP地址+MAC地址的欺骗。 与DAI不同的是， DAI仅仅检查ARP报文， IP Source Guard对所有经过定义IP Source Guard检查的端口的报文都要检测源地址。通过在交换机上配置IP Source Guard，可以过滤掉非法的IP/MAC地址，包含用户故意修改的和病毒、攻击等造成的。同时解决了IP地址冲突问题。 IP源防护1、源IP地址过滤2、源IP和源MAC地址过滤 使用源IP地址过滤时，IP源防护和端口安全是相互独立的。使用源IP和源MAC地址过滤时，二者合并为一，数据包源IP和源MAC地址必须符合IP源绑定表中的条目才能转发，并且为了确保DHCP工作正常，启用DHCP监听时必须启用option 82。 IP 源防护配置： 源IP地址过滤： switch(config-if)#ip verify source//Cisco 35系列交换机命令 switch(config-if)#ip verify source vlan dhcp-snooping//Cisco 45、65系列交换机命令 源IP和源MAC地址过滤： 首先要启用端口安全(switchport port-security),然后启用IP源防护switch(config-if)#ip verify source port-security//Cisco 35系列交换机命令 switch(config-if)#ip verify source vlan dhcp-snooping port-security//Cisco 45、65系列交换机命令 静态IP源绑定命令switch(config)#ip source binding mac-address vlan vlan-number ip-address interface interface-type interface-number 源IP和源MAC地址过滤12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061ip arp inspection vlan 10ip arp inspection log-buffer entries 1024ip arp inspection log-buffer logs 1024 interval 10!!!ip dhcp snooping vlan 10#此项必须开启ip dhcp snooping information option###Cisco设备做dhcp server (核心层交换机)###Core(config)#ip dhcp relay information trust-all###汇聚层交换机###ip dhcp snooping information option allow-untrustedip dhcp snooping database flash:dhcp_snooping.dbip dhcp snoopingip cefno ipv6 cef!!errdisable recovery cause psecure-violationerrdisable recovery cause dhcp-rate-limiterrdisable recovery interval 30!interface GigabitEthernet0/1 switchport access vlan 10 switchport mode access switchport port-security maximum 2 switchport port-security mac-address sticky switchport port-security mac-address sticky 0050.7966.6805 switchport port-security ip arp inspection limit rate 20 media-type rj45 negotiation auto #开启ip mac源防护 ip verify source port-security ip dhcp snooping limit rate 15 #手工绑定静态dhcp snooping表 SW1# ip dhcp snooping binding 0050.7966.6803 vlan 10 192.168.10.2 interface gi$ 或者 二者只能选一个 #静态IP源绑定 SW1(config)#ip source binding 0050.7966.6803 vlan 10 192.168.10.2 interface Gi0/3 SW1#show ip dhcp snooping binding MacAddress IpAddress Lease(sec) Type VLAN Interface------------------ --------------- ---------- ------------- ---- --------------------50:00:00:04:00:00 192.168.10.26 679939 dhcp-snooping 10 GigabitEthernet1/000:50:79:66:68:03 192.168.10.2 692704 dhcp-snooping 10 GigabitEthernet0/300:50:79:66:68:06 192.168.10.15 62129 dhcp-snooping 10 GigabitEthernet0/200:50:79:66:68:05 192.168.10.25 666943 dhcp-snooping 10 GigabitEthernet0/1Total number of bindings: 4SW1#show ip source binding MacAddress IpAddress Lease(sec) Type VLAN Interface------------------ --------------- ---------- ------------- ---- --------------------50:00:00:04:00:00 192.168.10.26 679986 dhcp-snooping 10 GigabitEthernet1/000:50:79:66:68:03 192.168.10.2 692751 dhcp-snooping 10 GigabitEthernet0/300:50:79:66:68:06 192.168.10.15 62176 dhcp-snooping 10 GigabitEthernet0/200:50:79:66:68:05 192.168.10.25 666991 dhcp-snooping 10 GigabitEthernet0/1Total number of bindings: 4 switch Security 交换机的主要配置文件接入层交换机主要配置123456789101112131415161718192021222324ip dhcp relay information trust-allip dhcp excluded-address 192.168.10.200 192.168.10.254ip dhcp excluded-address 192.168.10.1 192.168.10.20!ip dhcp pool pool10 network 192.168.10.0 255.255.255.0 default-router 192.168.10.1 dns-server 192.168.10.1 lease 8!ip dhcp pool pool10_liu host 192.168.10.15 255.255.255.0 client-identifier 0100.5079.6668.06 default-router 192.168.10.1 dns-server 192.168.10.1 !interface GigabitEthernet0/3 switchport trunk encapsulation dot1q switchport mode trunk media-type rj45 negotiation auto !interface Vlan10 ip address 192.168.10.1 255.255.255.0 核心层交换机主要配置 充当dhcp server123456789101112131415161718192021222324252627282930313233343536373839ip arp inspection vlan 10ip arp inspection log-buffer entries 1024ip arp inspection log-buffer logs 1024 interval 10!!!ip dhcp snooping vlan 10ip dhcp snooping database flash:dhcp_snooping.dbip dhcp snoopingerrdisable recovery cause psecure-violationerrdisable recovery cause dhcp-rate-limiterrdisable recovery interval 30interface GigabitEthernet0/0 switchport trunk encapsulation dot1q switchport mode trunk ip arp inspection trust media-type rj45 negotiation auto ip dhcp snooping trust!interface GigabitEthernet0/1 switchport access vlan 10 switchport mode access switchport port-security maximum 2 switchport port-security mac-address sticky switchport port-security mac-address sticky 0050.7966.6805 switchport port-security ip arp inspection limit rate 20 media-type rj45 negotiation auto ip verify source port-security ip dhcp snooping limit rate 15#为静态ip手动添加表项#手工绑定静态dhcp snooping表SW1# ip dhcp snooping binding 0050.7966.6803 vlan 10 192.168.10.2 interface gi$或者 二者只能选一个 #静态IP源绑定SW1(config)#ip source binding 0050.7966.6803 vlan 10 192.168.10.2 interface Gi0/3]]></content>
      <categories>
        <category>Cisco</category>
        <category>交换机</category>
      </categories>
      <tags>
        <tag>交换机安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux LVM 逻辑卷管理]]></title>
    <url>%2F2019%2F08%2F09%2Flinux-lvm%2F</url>
    <content type="text"></content>
      <categories>
        <category>Linux</category>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>lvm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[firewalld防火墙]]></title>
    <url>%2F2019%2F08%2F07%2Ffirewalld%2F</url>
    <content type="text"><![CDATA[开机启动禁用服务12# systemctl disable firewalld.service# systemctl enable firewalld.service 开启关闭重启服务123[root@webserver ~]# systemctl stop firewalld.service[root@webserver ~]# systemctl start firewalld.service[root@webserver ~]# systemctl restart firewalld.service 查看服务状态1[root@webserver ~]# systemctl status firewalld.service 查看防火墙状态1[root@webserver ~]# firewall-cmd --state 列出活动区域123[root@webserver ~]# firewall-cmd --get-active-zones public interfaces: ens33 显示所支持的服务列表1[root@webserver ~]# firewall-cmd --get-services 修改配置后重新加载1[root@webserver ~]# firewall-cmd --reload 查看开启的服务列表123[root@webserver zones]# firewall-cmd --list-services[root@webserver ~]# firewall-cmd --permanent --zone=public --list-services ssh dhcpv6-client 查看开启的端口列表123[root@webserver zones]# firewall-cmd --list-ports 3306/tcp 80/tcp[root@webserver ~]# firewall-cmd --permanent --zone=public --list-ports 开启/移除 某个 服务/端口12345[root@webserver ~]# firewall-cmd --permanent --zone=public --add-service=http[root@webserver ~]# firewall-cmd --permanent --zone=public --remove--service=http[root@webserver ~]# firewall-cmd --permanent --zone=public --add-port=80[root@webserver ~]# firewall-cmd --permanent --zone=public --remove-port=80[root@webserver ~]# firewall-cmd --permanent --zone=public --add-port=1200-1300 列出指定区域的所有配置 1234567891011121314[root@webserver zones]# firewall-cmd --zone=public --list-all public (active) target: default icmp-block-inversion: no interfaces: ens33 sources: services: ssh dhcpv6-client ports: 3306/tcp 80/tcp protocols: masquerade: no forward-ports: source-ports: icmp-blocks: rich rules: 列出指默认区域12[root@webserver zones]# firewall-cmd --get-default-zone public 设置默认区域1[root@webserver zones]# firewall-cmd --set-default-zone=public 查看指定接口所属的区域12[root@webserver zones]# firewall-cmd --get-zone-of-interface=ens33 public 为指定区域 添加网络接口 修改接口 删除接口 查询接口1234[root@webserver zones]# firewall-cmd --zone=public --add-interface=ens33[root@webserver zones]# firewall-cmd --zone=public --change-interface=ens33[root@webserver zones]# firewall-cmd --zone=public --remove-interface=ens33[root@webserver zones]# firewall-cmd --zone=public --query-interface=ens33]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>firewalld</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[书写范例]]></title>
    <url>%2F2019%2F08%2F05%2FWriting-example%2F</url>
    <content type="text"><![CDATA[这是一个书写范例 一级标题二级标题三级标题四级标题五级标题六级标题 分割线 字体加粗斜体字 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 简单note标签 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） 插入图片 链接Windows/Mac/Linux 全平台客户端 小型代码块 Ctrl+Alt+N 制作一份待办事宜todo列表 支持以 PDF 格式导出文稿 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 新增 Todo 列表功能 修复 LaTex 公式渲染问题 新增 LaTex 公式编号功能 插入高亮代码块 Name下载1234567@requires_authorizationclass SomeClass: passif __name__ == '__main__': # A comment print 'hello world' 居中引用方法一: 优秀的人，不是不合群，而是他们合群的人里面没有你 居中引用方法二： 落霞与孤与齐飞 秋水共长天一色 滕王阁序 note标签 default primary success info warning danger lab标签I heard the echo, from the valleys and the heartOpen to the lonely soul of sickle harvestingRepeat outrightly, but also repeat the well-being ofEventually swaying in the desert oasis I believe I am Born as the bright summer flowers Do not withered undefeated fiery demon ruleHeart rate and breathing to bear the load of the cumbersomeBored 普通引用 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. 普通引用 作者，出处 Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake 普通引用 作者 链接 NEW: DevDocs now comes with syntax highlighting. http://devdocs.io @DevDocstwitter.com/devdocs/status/356095192085962752 tabs标签 tab1标签页2标签页3 标签页1文本内容 标签页2文本内容 标签页3文本内容 按钮标签 文本 文本 & 标题 文本 & 图标 文本 & 大图标 (固定宽度) 引用站内链接可以通过如下语法引入站内文章的地址或链接： 12&#123;% post_path slug %&#125;&#123;% post_link slug [title] %&#125; 其中，slug 表示 _post 目录下的 Markdown 文件名。post_path 标签将会渲染为文章的地址，即 permalink；而 post_link 标签将会渲染为链接，可以通过 title 指定链接标题。 post_path范例1&#123;% post_path xxxxxx %&#125; /2019/08/05/Writing-example/ post_link范例1&#123;% post_link xxxxxxx 书写范例文章 %&#125; 生成 书写范例 这种站内引用方式比直接使用 url 引用的形式更为可靠，因为即使修改了 permalink 格式，或者修改了文章的路由地址，只要 Markdown 文件名没有发生改变，引用链接都不会失效。 123456highlight: enable: true line_number: true-auto_detect: false+auto_detect: true tab_replace: IP管理百度12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#### 作者 刘宝良#!/bin/bash###获取网卡数量netnum=$(nmcli device status | awk '/en*/&#123;print$1&#125;' | wc -l)#echo "$netnum"###判断网卡数量是否等于1，不等于1手工输入列出的网卡名if [ 1 -ne $netnum ]; then netlist=$(nmcli device status | awk '/en*/&#123;print$1&#125;') echo "Network Device Name is: $netlist" read -p "Press Network Device Name ,then press Enter :" netname nmcli device status | awk '/en*/&#123;print$1&#125;' | grep $netname &gt; /dev/null ###如果输入的值和列表中的不一样$?的返回值不等于0，脚本直接退出 if [ $? != 0 ]; then echo "Network Device Name is ERROE........" sleep 2 exit 0 fi###等于1直接给netname赋值为这个网卡的名字else netname=$(nmcli device status | awk '/en*/&#123;print$1&#125;')fi###输入IP地址、子网掩码、网关、DNSread -p "Type the IP address for the Management Network:" net_ipread -p "Type the Netmask for the Management Network:" net_netmaskread -p "Type the Gateway for the Management Network:" net_gatewayread -p "Type the Dns for the Management Network:" net_dns###备份网络配置文件并删除然后新建\cp -f /etc/sysconfig/network-scripts/ifcfg-$netname /etc/sysconfig/network-scripts/ifcfg-$netname.bak &gt; /dev/null 2&gt;&amp;1rm -f /etc/sysconfig/network-scripts/ifcfg-$netname &gt; /dev/null 2&gt;&amp;1touch /etc/sysconfig/network-scripts/ifcfg-$netnamecat &gt; /etc/sysconfig/network-scripts/ifcfg-$netname &lt;&lt; EOFTYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=staticDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=$netnameDEVICE=$netnameONBOOT=yesIPADDR=$net_ipNETMASK=$net_netmaskGATEWAY=$net_gatewayDNS1=$net_dnsIPV6_PRIVACY=noEOFecho "You must restart your OS or execute command 'systemctl restart network' to apply these changes"sleep 5exit 1 ymal脚本下载链接12345678910111213---- name: Install WordPress, MariaDB, Nginx, and PHP-FPM hosts: wordpress-server remote_user: root # remote_user: user # sudo: yes roles: - common - mariadb - nginx - php-fpm - wordpress]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>php</tag>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
